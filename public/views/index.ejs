<% layout('layouts/boilerplate') %>


    <div class="h-100 row flex-grow-1 w-100 m-0">
        <span class=" col-md-5 col-lg-3">
            <h3 class="p-2">Rooms</h3>
            <div id="room-holder" class="d-block" role="group">
                <% for(i of rooms) {%>
                    <button class="w-100 btn btn-secondary mx-1 my-2" id="<%=i._id %>">
                        <%=i.name %>
                    </button>
                    <% } %>
            </div>
            <hr>
            <div class="mt-5">
                <form action="/createroom" method="get">
                    <button class="btn btn-primary w-100">New Room</button>
                </form>
                <form class="card p-2 my-2" action="/joinroom" method="post">
                    <input type="text" name="id" class="form-control my-2" required>
                    <button class="btn btn-primary">Join Room</button>
                </form>
            </div>
        </span>
        <span id="right" class="position-md-absolute col-md-7 col-lg-9 d-none d-flex flex-column h-100 bg-white shadow">

            <div id="room-header" class="bg-light pt-3 ps-3 mb-2 d-flex flex-row justify-content-between">
                <div>
                    <h3 id="room-title"></h3>
                    <p id="room-id" class="mb-0"></p>
                </div>
                <button id="close-chat" class="p-2 bg-light">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor"
                        class="bi bi-x-lg" viewBox="0 0 16 16">
                        <path fill-rule="evenodd"
                            d="M13.854 2.146a.5.5 0 0 1 0 .708l-11 11a.5.5 0 0 1-.708-.708l11-11a.5.5 0 0 1 .708 0Z" />
                        <path fill-rule="evenodd"
                            d="M2.146 2.146a.5.5 0 0 0 0 .708l11 11a.5.5 0 0 0 .708-.708l-11-11a.5.5 0 0 0-.708 0Z" />
                    </svg>
                </button>
            </div>
            <div id="txt" class="px-3 flex-grow-1"></div>
            <form id="msgInput" class="d-flex bg-light">
                <input class="form-control d-inline mx-2" type="text" id="msgbody">
                <button class="btn btn-primary d-inline" id="sendmsg">Send</button>
            </form>

        </span>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let socket = io();
        let txt = document.getElementById("txt")
        let msgBody = document.getElementById("msgbody")
        let sendMsg = document.getElementById("sendmsg")
        let roomTitle = document.getElementById("room-title")
        let joinCode = document.getElementById("room-id")
        let closeChat = document.getElementById("close-chat")
        let username = '<%- JSON.stringify(username) %>'
            <% for (i of rooms) {%>

                document.getElementById('<%=i._id %>').addEventListener("click", (e) => {
                    document.getElementById("right").classList.remove('d-none');
                    socket.emit("<%=i._id %>", "<%=i._id %>");
                    txt.innerHTML = "";
                    roomTitle.innerText = e.target.innerText;
                    joinCode.innerText = "Join code: " + e.target.id
                })
                <% } %>

                    sendMsg.addEventListener("click", (e) => {
                        e.preventDefault();
                        if (!msgBody.value) return;
                        socket.emit("msg", { text: msgBody.value, username: username })
                        msgBody.value = ""
                    })

        closeChat.addEventListener("click", () => {
            document.getElementById("right").classList.add('d-none');

        })

        socket.on('msg', (msg) => {
            let div = document.createElement('div');
            let wrapper = document.createElement('div');
            let msgEl = document.createElement('p')
            let usernameEl = document.createElement('span')

            msgEl.innerText = msg.text
            if (msg.username == username) {
                div.classList.add("fromSelf");
            }
            else {
                div.classList.add("fromOther",);
            }

            usernameEl.innerText = msg.username.slice(1, -1);

            wrapper.appendChild(msgEl);
            wrapper.appendChild(usernameEl);

            div.appendChild(wrapper);
            div.classList.add('msgHolder')
            txt.appendChild(div);
            txt.scrollTop = txt.scrollHeight

        })
    </script>

    <style>
        body,
        html {
            height: 100vh;
            overflow-y: hidden;
        }

        .fromSelf div p {
            background-color: var(--bs-gray-500);
        }

        .fromOther div p {
            color: var(--bs-light);
            background-color: var(--bs-cyan);

        }

        .msgHolder {
            display: flex;
        }

        .msgHolder div span {
            margin: 0;
            margin-top: -15px;
            padding-left: 0px 5px 0px 5px;
            font-size: .8rem;
        }

        .msgHolder div {
            display: flex;
            flex-direction: column;
        }

        .fromSelf {
            text-align: right;

            justify-content: right;

        }

        .msgHolder p {
            display: block;
            padding: 10px;
            border-radius: 10px;
        }

        #txt {
            bottom: 0;
            overflow-y: scroll;
        }

        #room-header {
            padding: 1rem .5rem 1rem .5rem;

        }

        #right {
            max-height: calc(100vh - 67.19px);
            padding: 0;
        }

        #msgInput {
            padding: 1rem .5rem 1rem .5rem;
        }

        #room-id {
            font-weight: 600;
        }

        #room-holder {
            max-height: 60vh;
            overflow-y: scroll;
            overflow-x: hidden;
        }

        #close-chat {
            display: none;
            border: none;
            transition: transform 100ms;
        }

        #close-chat:hover {
            transform: scale(1.05);
        }

        @media(max-width: 768px) {
            .position-md-absolute {
                position: absolute;
            }

            #close-chat {
                display: inherit !important;
            }
        }
    </style>